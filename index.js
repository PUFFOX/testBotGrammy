require('dotenv').config();
const {Bot, GrammyError, HttpError, Keyboard, InlineKeyboard} = require('grammy');
const {hydrate} = require('@grammyjs/hydrate');

const bot = new Bot(process.env.BOT_API_KEY);
bot.use(hydrate());


bot.command('start', async (ctx) =>
{
    await ctx.reply('–•–∞–π, –∑–∞–π–¥–∏ –≤ –º–µ–Ω—é...')
});




//—Ä–æ–±–∏–º–æ –º–∞—Å—Å–∏–≤ –∫–æ–º–∞–Ω–¥
bot.api.setMyCommands(
    [
        {
            command: 'want_mk',
            description: '–ú–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ú–ö',
        },
        {
            command:'first_lesson',
            description: '–Ø–∫—â–æ –≤–ø–µ—Ä—à–µ, —Å–ø—Ä–æ–±—É–π —Å–µ–±–µ –Ω–∞ —Ö–∞–ª—è–≤–Ω–æ–º—É —É—Ä–æ–∫—É',
        },
        {
            command:'how_i_am',
            description: '–Ø –∑–∞—Ä–∞ —Ä–æ–∑–∫–∞–∂—É —à–æ —Ç–∏ –∑–∞ —Ñ—Ä—É–∫—Ç',
        },
        {
            command:'parse',
            description: '–¢—É—Ç–∞ —Å–∏–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª',
        },
        {
            command:'parse2',
            description: '–¢—É—Ç–∞ —Å–∏–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –±–µ–∑ –ø—Ä–µ–≤—å—é',
        },
        {
            command:'hydrate',
            description: '–¢—É—Ç–∞ —Å–∏–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –±–µ–∑ –ø—Ä–µ–≤—å—é',
        },

    
    ]
)


// –∫–æ–º–∞–Ω–¥–∞
bot.command('want_mk', async (ctx) =>
{
    await ctx.reply('–ë–∞–±–∫–∏ –≤–ø–µ—Ä–µ–¥!')
});

// –∫–æ–º–∞–Ω–¥–∞
bot.command('first_lesson', async (ctx) =>
{
    await ctx.reply('–Ω—É —Å–ø—Ä–æ–±—É–π —à–æ...')
});

// –∫–æ–º–∞–Ω–¥–∞ —Ä–æ–∑–∫–∞–∂–µ —à–æ —Ç–∏ –∑–∞ —Ñ—Ä—É–∫—Ç —ñ —Ä–µ–∞–∫—Ü—ñ—è
bot.command('how_i_am', async (ctx) =>
{
    // await ctx.reply(`–¢–≤—ñ–π ID: ${ctx.from.id}`);
    // await ctx.reply(`–¢–≤—ñ–π —Ç–µ–ª–µ—Ñ–æ–Ω: ${ctx.from.phone_number}`);
    await ctx.react("üëç")
    await ctx.reply(`–¢–≤—ñ–π ID: ${ctx.from.id}` ,
    {
        reply_parameters: {message_id: ctx.msg.message_id}
    });

});

// –∫–æ–º–∞–Ω–¥–∞ link parse and spoiler
bot.command('parse', async (ctx) =>
{
    await ctx.reply('–¢—É—Ç —Å–∏–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —è–∫–∏–π –∫–æ–ª–∏—Å—å –±—É–¥–µ <a href="https://t.me/dmytrogordon_official"> <span class="tg-spoiler">links </span></a>',
    {
        parse_mode: 'HTML'
    });
});

//—Å–∏–ª–∫–∞ –±–µ–∑ –ø—Ä–µ–≤—å—é
bot.command('parse2', async (ctx) =>
{
    await ctx.reply('–¢—É—Ç \\! —Å–∏–ª–∫–∞ \\ [canal](https://t.me/kpszsu)',
    {
        parse_mode: 'MarkdownV2',
        disable_web_page_preview: true
    });
});


//–∫–æ–º–∞–Ω–¥–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
bot.command('mood', async (ctx) =>
{
    const moodKeyboard = new Keyboard().text('Good').row().text('So').text('Fuck').row().resized()
    await ctx.reply('How are you?',
    {
        reply_markup: moodKeyboard
    })
});


//–∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—Ä–æ—Å
bot.command('share', async (ctx) =>
{
    const shareKeyboard = new Keyboard().requestLocation('Location').requestContact('Contact').requestPoll('Poll').placeholder('–Ω—É –ø–æ–ø—Ä–æ–±—É–π').resized()
    await ctx.reply('–®–æ –ø–æ–∫–∞–∑–∞—Ç–∏?',
    {
        reply_markup: shareKeyboard
    })
});

//–ø—Ä–∏–Ω—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
bot.on(':contact', async (ctx) =>
{
    await ctx.reply('–ß–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä')
});


const hydrateKeyboard = new InlineKeyboard()
    .text('–í–∑–Ω–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞', 'order-status')
    .text('–ù–∞–ø–∏—Å–∞—Ç–∏ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É', 'support');

const backKeyboard = new InlineKeyboard()
    .text('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back');

//INLINE –∫–ª–∞–≤–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∑ hydrate
bot.command('hydrate', async (ctx) =>
{
    await ctx.reply('–û–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é' ,
    {
        reply_markup: hydrateKeyboard,
    });
});

bot.callbackQuery('order-status', async (ctx) =>
{
    await ctx.callbackQuery.message.editText('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ø—É—Ç–∏',
    {
        reply_markup: backKeyboard,
    })
    await ctx.callbackQuery()
});

bot.callbackQuery('support', async (ctx) =>
{
    await ctx.callbackQuery.message.editText('–ß–µ—Ä–∫–∞–Ω–∏ –∑–∞–ø—Ä–æ—Å',
    {
        reply_markup: backKeyboard,
    })
    await ctx.callbackQuery()
});

bot.callbackQuery('back', async (ctx) =>
{
    await ctx.callbackQuery.message.editText('–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é',
    {
        reply_markup: hydrateKeyboard,
    })
    await ctx.callbackQuery()
});



//–≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —ñ –∑–∞–∫—Ä–∏–≤–∞—î —ó—ó
bot.hears('Good', async ctx => 
{
    await ctx.reply('OK',
    {
        reply_markup: {remove_keyboard: true}
    });

});



//—Å–∫–∞–∑–∞—Ç–∏ —è–∫–µ ID, —Ç–∞–∫–æ–∂ –±–æ—Ç –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –Ω–∞ —Ç–≤–æ–µ —Å–º—Å
bot.hears('ID', async ctx => 
{
    await ctx.reply(`–¢–≤—ñ–π ID: ${ctx.from.id}` ,
    {
        reply_parameters: {message_id: ctx.msg.message_id}
    });

});





//–≥–æ–ª–æ—Å–æ–≤–µ
bot.on(':voice', async (ctx) =>
{
    await ctx.reply('–Ø —Ü—å–æ–≥–æ –Ω–µ —á—É–≤')
});


//—Å–∏–ª–∫–∞
bot.on('::url', async (ctx) =>
{
    await ctx.reply('—à–æ –∑–∞ —Å–æ–º–Ω—ñ—Ç–µ–ª—å–Ω–∞ —Å–∏–ª–∫–∞?')
});


//—Å–≤—ñ–π —Ñ—ñ–ª—å—Ç—Ä –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —Ö—Ç–æ –∞–¥–º—ñ–Ω
bot.on('msg').filter((ctx) => 
    {
        return ctx.from.id === 339085573 // —è–∫—â–æ —Ç—Ä—É
    }, async (ctx) =>
    {
        await ctx.reply('–æ —Ö–∞–∑–∞—ñ–Ω –¥—Ä–∞—Å—Ç–µ') //–ø—Ä–∞—Ü—é—î–º
    });


//—â–µ —Ñ—ñ–ª—å—Ç—Ä –±—ñ–ª—å—à —Ç–æ–Ω–∫—ñ—à–µ, —Ç–∞–∫–æ–∂ —ñ –º–∞—Å—Å–∏–≤ —è–∫—â–æ —Ç—Ä–µ–±–∞
bot.hears('–ø—ñ–Ω–≥', async ctx => 
{
    await ctx.reply('–Ω—É –ø–æ–Ω–≥ —ñ —à–æ')
});


//—Ä–µ–∞–∫—Ü—ñ—è –Ω–∞ –ø–æ–≥–∞–Ω—ñ —Å–ª–æ–≤–∞
bot.hears(/–ø–∏–ø–µ—Ü/, async ctx => 
{
    await ctx.reply('—Ç–∏ —à–æ —Ä—É–≥–∞–µ—à—å—Å—è, –∫—É—Ä–∏—Ü–∞')
});





//–∑–∞–≥–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
bot.on('msg', async (ctx) =>
{
    await ctx.reply('–Ü —à–æ —Ç–∏ —á—É–¥–∏—à?')
    console.log(ctx.msg);
    console.log(ctx.from); //—ñ–Ω—Ñ–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    console.log(ctx.me);
});






// // –º–∞—Å—Å–∏–≤ –∫–æ–º–∞–Ω–¥ —ñ –æ–¥–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
// bot.command(['want_mk', 'first_lesson', 'say_hi'], async (ctx) =>
// {
//     await ctx.reply('–Ü —à–æ —Ç–∏ —á—É–¥–∏—à? Hello')
// });




bot.catch(err =>
    {
        const ctx = err.ctx;
        console.error('Error while handlind update ${ctx.update.update_id}:');
        const e = err.error;

        if (e instanceof GrammyError) {
            console.error(e.message);
        } else if (e instanceof HttpError) {
            console.error(e.message);
        } else {
            console.error(e);
        }
    })




bot.start();